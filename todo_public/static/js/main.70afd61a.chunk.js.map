{"version":3,"sources":["Redux/index.js","Redux/actions.js","Component/Insert.js","Component/Display.js","Component/Filter.js","App.js","serviceWorker.js","index.js"],"names":["InitState","data","title","complete","filter","todo","done","root_reducer","combineReducers","state","action","type","tmp1","check","length","tmp2","tmp3","map","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","remove_items","change_stage","Insert","dispatch","useDispatch","useState","insert","setInsert","className","name","placeholder","value","onChange","e","target","onClick","add_items","Display","useSelector","Mapping","isDisplay","s","diff","result","item","index","key","checked","style","display","fontSize","Filter","props","display_todo","display_done","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70afd61a.chunk.js","sourcesContent":["import {createStore, combineReducers} from 'redux'\n\nlet InitState = {\n    data: [\n        {\n            title: \"wash dishes\",\n            complete: false\n        },\n        {\n            title: \"go home\",\n            complete: true\n        }\n    ],\n    filter: {\n        todo: true,\n        done: true\n    }\n}\n\nfunction filter_reducer(state= InitState.filter, action) {\n    switch(action.type){\n        case \"_TODO\":\n            return {done: false, todo: true}\n        case \"_DONE\":\n            return {done: true, todo: false}\n        case \"_ALL\":\n            return {done: true, todo: true}\n        default:\n            return state\n    }\n}\n\nfunction data_reducer(state = InitState.data, action) {\n    switch(action.type){\n        case \"ADD_ITEM\":\n            let tmp1 = state.filter(\n                check => check.title !== action.title\n            )\n            return tmp1.length === state.length  ? [\n                ...state,\n                {\n                    title: action.title,\n                    complete: false\n                }\n            ] :\n            [...state]\n        case \"REMOVE_ITEM\": \n            let tmp2 = state.filter(\n                check => check.title !== action.title\n            )\n            return tmp2\n        case \"CHANGE_STAGE\":\n            let tmp3 = state.map(\n                check => {\n                    if(check.title === action.title){\n                        return {...check, complete: !check.complete}\n                    }\n                    return {...check}\n                }\n            )\n            return tmp3\n        default: \n                return state\n    }\n}\n\nconst root_reducer= combineReducers({\n    data: data_reducer,\n    filter: filter_reducer\n})\n\nconst store = createStore(\n    root_reducer, \n    InitState,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n\nexport default store","export function add_items(title=\"blabla\") {\n    return {\n        type: \"ADD_ITEM\",\n        title\n    }\n}\n\nexport function remove_items(title=\"blabla\") {\n    return {\n        type: \"REMOVE_ITEM\",\n        title\n    }\n}\n\nexport function change_stage(title=\"blabla\") {\n    return {\n        type: \"CHANGE_STAGE\",\n        title\n    }\n}\n\nexport function display_todo(Do= true) {\n    return {\n        type: \"_TODO\"\n    }\n}\n\nexport function display_done(Do= true) {\n    return {\n        type: \"_DONE\"\n    }\n}\n\nexport function display_all() {\n    return {\n        type: \"_ALL\"\n    }\n}","import React, {useState} from 'react'\nimport {useDispatch} from 'react-redux'\nimport {add_items} from '../Redux/actions'\n\nexport default function Insert() {\n    const dispatch = useDispatch()\n    const [insert, setInsert] = useState(\"\")\n\n    return (\n        <li className=\"insert-area\">\n            <input name=\"A_A\"\n            placeholder=\"add something here\"\n            type=\"text\" \n            value={insert} \n            onChange={\n                e => setInsert(e.target.value)\n            }\n            />\n            <button onClick={\n                () => {\n                    if (insert !== \"\") {\n                        dispatch(add_items(insert))\n                        setInsert(\"\")\n                    }\n                }\n            }\n            >add</button>\n        </li>\n    )\n}","import React from 'react'\nimport {useSelector, useDispatch} from 'react-redux'\nimport {remove_items, change_stage} from '../Redux/actions'\nimport Insert from './Insert'\n\nexport default function Display() {\n\n    const dispatch =useDispatch()\n    const todo = useSelector(state => Mapping(state.data, false))\n    const done = useSelector(state => Mapping(state.data, true))\n    const isDisplay = useSelector(state => state.filter)\n\n    function Mapping(s= [], diff= false) {\n        const result = s.map(\n            (item, index) => {\n                if (item.complete === diff) return (             \n                    <li key={index}> \n                        <input type=\"checkbox\" \n                        checked={diff}\n                        onChange={()=> dispatch(change_stage(item.title))}\n                        />\n                        {item.title}\n                        <button className=\"remove-button\"\n                        onClick={\n                            () => dispatch(remove_items(item.title))\n                        }\n                        >\n                            remove\n                        </button>\n                    </li>\n                )\n                return undefined\n            }\n        )\n        return result\n    }\n\n    return (\n        <div className=\"container\">\n            <ul style={{display: isDisplay.todo ? \"block\" : \"none\"}}>\n                <li style={{fontSize: \"1.2rem\"}}>To do</li>\n                {todo}\n                <Insert />\n            </ul>\n            <ul style={{display: isDisplay.done ? \"block\" : \"none\"}}>\n                <li style={{fontSize: \"1.2rem\"}}>Done</li>\n               {done}\n            </ul>\n        </div>\n    )\n}","import React from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {display_todo, display_done, display_all} from '../Redux/actions'\n\nexport default function Filter(props) {\n\n    const dispatch = useDispatch()\n    const{todo, done} = useSelector(state => state.filter)\n\n    return (\n        <div className=\"filter-group\">\n            <button \n            className={todo && done === true ? \"is-click\" : null}\n            onClick={ () => dispatch(display_all()) }>\n                ALL\n            </button >\n            <button \n            className={todo === true && done === false ? \"is-click\" : null}\n            onClick={ () => dispatch(display_todo()) }>\n                TODO\n            </button>\n            <button \n            className={todo === false && done === true ? \"is-click\" : null}\n            onClick={ () => dispatch(display_done()) }>\n                DONE\n            </button>\n        </div>\n    )\n}","import React from 'react'\nimport {Provider} from 'react-redux'\nimport store from './Redux'\nimport Display from './Component/Display'\nimport Filter from './Component/Filter'\nimport './styles.css'\n\nfunction App() {\n\n  return (\n    <Provider store={store}>\n      <div className=\"todo-list\">\n        <Filter />\n        <Display />\n      </div>\n    </Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}